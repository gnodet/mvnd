#
# Copyright (c) 2017 Angelo Zerr and other contributors as
# indicated by the @author tags.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

name: Release

on:
  # manual trigger
  workflow_dispatch:
  # build on new tags
  push:
    tags:
      - '*'

env:
  GRAALVM_VERSION: '21.3.0'
  JAVA_VERSION: '17'

jobs:
  build:
    name: 'Build with Graal on ${{ matrix.os }}'
    strategy:
      fail-fast: true
      matrix:
        os: [ ubuntu-18.04, macOS-10.15, windows-2019 ]
    runs-on: ${{ matrix.os }}

    steps:
      - name: 'Check out repository'
        uses: actions/checkout@v2

      - name: 'Set vars'
        shell: bash
        run: |
          OS=$(echo '${{ runner.os }}' | awk '{print tolower($0)}')
          [[ $OS == 'ubuntu' ]] && echo "OS=linux" >> $GITHUB_ENV || echo "OS=$OS" >> $GITHUB_ENV
          [[ $OS == 'macos' ]] && echo "OS=darwin" >> $GITHUB_ENV || echo "OS=$OS" >> $GITHUB_ENV
          echo "VERSION=$(./mvnw help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV

      - name: 'Set up Graal'
        uses: graalvm/setup-graalvm@v1
        with:
          version: ${{ env.GRAALVM_VERSION }}
          java-version: ${{ env.JAVA_VERSION }}
          components: 'native-image'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: 'Build native distribution'
        run: ./mvnw clean verify -Pnative -Dmrm=false -B -ntp -e -DskipTests

      - name: 'Upload artifact'
        uses: actions/upload-artifact@v2
        with:
          name: artifacts
          path: dist/target/mvnd-*.zip

  release:
    runs-on: ubuntu-18.04
    needs: [build]

    steps:
      - name: 'Check out repository'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: 'Download all build artifacts'
        uses: actions/download-artifact@v2

      - name: 'Set up Java'
        uses: actions/setup-java@v2
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'zulu'

      - name: 'Cache Maven packages'
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: ls -R
        run: ls -R

      - name: Set environment
        run: |
          VERSION=${GITHUB_REF##*/}
          echo "Using VERSION=$VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Build source distributions
        run: ./mvnw clean verify -Psource-distribution -pl :mvnd -Dmrm=false -B -ntp -e

      - name: Compute sha256 checksums
        run: |
          sha256sum artifacts/mvnd-${{ env.VERSION }}-linux-amd64.zip | cut -d ' ' -f 1 > artifacts/mvnd-${{ env.VERSION }}-linux-amd64.zip.sha256
          sha256sum artifacts/mvnd-${{ env.VERSION }}-darwin-amd64.zip | cut -d ' ' -f 1 > artifacts/mvnd-${{ env.VERSION }}-darwin-amd64.zip.sha256
          sha256sum artifacts/mvnd-${{ env.VERSION }}-windows-amd64.zip | cut -d ' ' -f 1 > artifacts/mvnd-${{ env.VERSION }}-windows-amd64.zip.sha256
          sha256sum target/mvnd-${{ env.VERSION }}-src.zip | cut -d ' ' -f 1 > mvnd-${{ env.VERSION }}-src.zip.sha256
          sha256sum target/mvnd-${{ env.VERSION }}-src.tar.gz | cut -d ' ' -f 1 > mvnd-${{ env.VERSION }}-src.tar.gz.sha256

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: ${{ env.VERSION }}
          draft: false
          prerelease: false

      - name: Deploy mvnd-src.zip
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: target/mvnd-${{ env.VERSION }}-src.zip
          asset_name: mvnd-${{ env.VERSION }}-src.zip
          asset_content_type: application/zip

      - name: Deploy mvnd-src.zip.sha256
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/mvnd-${{ env.VERSION }}-src.zip.sha256
          asset_name: mvnd-${{ env.VERSION }}-src.zip.sha256
          asset_content_type: text/plain

      - name: Deploy mvnd-src.tar.gz
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: target/mvnd-${{ env.VERSION }}-src.tar.gz
          asset_name: mvnd-${{ env.VERSION }}-src.tar.gz
          asset_content_type: application/tar.gz

      - name: Deploy mvnd-src.tar.gz.sha256
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/mvnd-${{ env.VERSION }}-src.tar.gz.sha256
          asset_name: mvnd-${{ env.VERSION }}-src.tar.gz.sha256
          asset_content_type: text/plain

      - name: Deploy mvnd-linux-amd64.zip
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/mvnd-${{ env.VERSION }}-linux-amd64.zip
          asset_name: mvnd-${{ env.VERSION }}-linux-amd64.zip
          asset_content_type: application/zip

      - name: Deploy mvnd-linux-amd64.zip.sha256
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/mvnd-${{ env.VERSION }}-linux-amd64.zip.sha256
          asset_name: mvnd-${{ env.VERSION }}-linux-amd64.zip.sha256
          asset_content_type: text/plain

      - name: Deploy mvnd-darwin-amd64.zip
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/mvnd-${{ env.VERSION }}-darwin-amd64.zip
          asset_name: mvnd-${{ env.VERSION }}-darwin-amd64.zip
          asset_content_type: application/zip

      - name: Deploy mvnd-darwin-amd64.zip.sha256
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/mvnd-${{ env.VERSION }}-darwin-amd64.zip.sha256
          asset_name: mvnd-${{ env.VERSION }}-darwin-amd64.zip.sha256
          asset_content_type: text/plain

      - name: Deploy mvnd-windows-amd64.zip
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/mvnd-${{ env.VERSION }}-windows-amd64.zip
          asset_name: mvnd-${{ env.VERSION }}-windows-amd64.zip
          asset_content_type: application/zip

      - name: Deploy mvnd-windows-amd64.zip.sha256
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/mvnd-${{ env.VERSION }}-windows-amd64.zip.sha256
          asset_name: mvnd-${{ env.VERSION }}-windows-amd64.zip.sha256
          asset_content_type: text/plain

